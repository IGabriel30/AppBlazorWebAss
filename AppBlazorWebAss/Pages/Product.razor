@page "/products"
@inject ProductIJGZService productService

<h3>Productos</h3>

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nombre</label>
        <InputText @bind-Value="newProduct.NombreIJGZ" class="form-control" />
        <ValidationMessage For="@(() => newProduct.NombreIJGZ)" />
    </div>

    <div class="form-group">
        <label>Descripción</label>
        <InputTextArea @bind-Value="newProduct.DescripcionIJGZ" class="form-control" />
        <ValidationMessage For="@(() => newProduct.DescripcionIJGZ)" />
    </div>

    <div class="form-group">
        <label>Precio</label>
        <InputNumber @bind-Value="newProduct.PrecioIJGZ" class="form-control" />
        <ValidationMessage For="@(() => newProduct.PrecioIJGZ)" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Producto</button>
</EditForm>

@if (products == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.NombreIJGZ</td>
                    <td>@product.DescripcionIJGZ</td>
                    <td>@product.PrecioIJGZ</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductIJGZDTO> products;
    private ProductIJGZDTO newProduct = new ProductIJGZDTO();

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProductsAsync();
        products = products.OrderByDescending(s => s.Id).ToList();
    }

    private async Task HandleValidSubmit()
    {
        var createdProduct = await productService.CreateProductAsync(newProduct);
        products.Add(createdProduct);
        newProduct = new ProductIJGZDTO();
        products = products.OrderByDescending(s => s.Id).ToList();
    }
}
