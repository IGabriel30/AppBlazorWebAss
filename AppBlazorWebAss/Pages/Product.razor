@page "/products"
@inject ProductIJGZService productService

<h3>Productos</h3>

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <label for="productName">Nombre</label>
                <InputText id="productName" @bind-Value="newProduct.NombreIJGZ" class="form-control" />
                <ValidationMessage For="@(() => newProduct.NombreIJGZ)" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label for="productPrice">Precio</label>
                <InputNumber id="productPrice" @bind-Value="newProduct.PrecioIJGZ" class="form-control" />
                <ValidationMessage For="@(() => newProduct.PrecioIJGZ)" />
            </div>
        
    </div>
    </div>
    
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <label for="productDescription">Descripción</label>
                <InputTextArea id="productDescription" @bind-Value="newProduct.DescripcionIJGZ" class="form-control" rows="3" />
                <ValidationMessage For="@(() => newProduct.DescripcionIJGZ)" />
            </div>
        </div>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Guardar Producto</button>
</EditForm>

@if (products == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered mt-3">
            <thead class="table-dark">
                <tr>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.NombreIJGZ</td>
                        <td>@product.DescripcionIJGZ</td>
                        <td>@product.PrecioIJGZ</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private List<ProductIJGZDTO> products;
    private ProductIJGZDTO newProduct = new ProductIJGZDTO();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProductsAsync();
        products = products.OrderByDescending(s => s.Id).ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdProduct = await productService.CreateProductAsync(newProduct);
            products.Add(createdProduct);
            newProduct = new ProductIJGZDTO();
            errorMessage = null; // Limpiar mensaje de error
        }
        catch (Exception ex)
        {
            errorMessage = "Error al crear el producto: " + ex.Message; // Manejo de errores
        }

        products = products.OrderByDescending(s => s.Id).ToList();
    }
}
